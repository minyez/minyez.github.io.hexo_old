<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shigaro</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://minyez.github.io/"/>
  <updated>2018-07-20T14:36:09.229Z</updated>
  <id>http://minyez.github.io/</id>
  
  <author>
    <name>Shigaro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPAW教程(一)——安装及测试</title>
    <link href="http://minyez.github.io/2018/07/20/gpaw-1/"/>
    <id>http://minyez.github.io/2018/07/20/gpaw-1/</id>
    <published>2018-07-20T00:38:40.000Z</published>
    <updated>2018-07-20T14:36:09.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列将介绍如何使用第一性原理电子结构计算Python包<a href="https://wiki.fysik.dtu.dk/gpaw/index.html" target="_blank" rel="noopener">GPAW</a>，进行材料的电子结构模拟，包括最基本的DFT基态计算以及更高级的准粒子<em>GW</em>和BSE的光谱性质计算。本文作为该系列的第一篇文章，对GPAW在本地和集群上的安装、样例测试进行介绍，总结了这一过程中遇到的问题和解决方案。<br> <a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>相比较VASP、WIEN2k、QE等主流材料几何和电子结构计算程序，GPAW具有的最大特点就是它是一个Python模块，而不是一个独立的程序。你可以像读其他Python模块代码一样读它，查看它属性和docstring，函数依赖参数明确。GPAW中体系构筑依赖于<a href="https://wiki.fysik.dtu.dk/ase" target="_blank" rel="noopener">ASE</a>，一个集成度很高的原子模拟函数模块，作为各种DFT calculator的接口和数据处理及可视化模块被广泛使用。事实上GPAW和ASE都是DTU Thygesen课题组开发维护，因此可以把GPAW看成是ASE自己的first-principles calculator。GPAW中一些performance-critical组件由NumPy或自编的C扩展实现，因此GPAW的计算效率也是有保证的。</p><p>我对GPAW的了解始于对低维体系准粒子能带结构的研究，在这方面Thygesen课题组做了很多重要的工作，这些自然是在GPAW中进行的代码实现，包括参数收敛测试和analytical correction to long wavelength limit，尤其后者是我们希望在LAPW框架下实现的。在读懂代码之前，总应该先熟悉它的使用吧。于是想到了做这个系列。这一回从编译安装开始。</p><p>GPAW安装基于Python模块ASE、NumPy，线性代数库BLAS/LAPACK以及交换关联泛函库LIBXC。快速傅里叶变换可以通过链接FFTW3加速，并行计算可(大规模并行时必须)链接ScaLAPACK。本文将利用以上所有的库，其中线性代数库和ScaLAPACK用Intel MKL代替。</p><p>以下过程所用的<code>python</code>均为在<a href="https://hpc.pku.edu.cn" target="_blank" rel="noopener">北京大学高性能计算平台</a>上anaconda/2-4.4.0.1模块[<code>anaconda (version 1.6.3)</code>]内的<code>python 2.7.15</code>，C扩展的编译器为Intel 2017 update 1的<code>mpiicc</code>，FFTW3(3.3.4)和LIBXC(4.2.3)均由该版本Intel编译器编译。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>作为Python模块，GPAW在<a href="">Python Package Index</a>有项目记录，因此可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install gpaw --user</span></span><br></pre></td></tr></table></figure><p>将其安装到本地用户目录。但这种安装方式不容易控制和自定义外部库的链接，因此我们采用从源码手动安装的方式。主要分以下几步进行。</p><h3 id="依赖的安装"><a href="#依赖的安装" class="headerlink" title="依赖的安装"></a>依赖的安装</h3><h4 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h4><p>载入<code>anaconda</code>环境中已经预装了NumPy环境</p><h4 id="ASE"><a href="#ASE" class="headerlink" title="ASE"></a>ASE</h4><p>使用<code>pip</code>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install ase --user</span></span><br></pre></td></tr></table></figure><h4 id="FFTW3"><a href="#FFTW3" class="headerlink" title="FFTW3"></a>FFTW3</h4><p>留待补充，可先参考官方文档。</p><h4 id="LIBXC"><a href="#LIBXC" class="headerlink" title="LIBXC"></a>LIBXC</h4><p>留待补充，可先参考官方文档。</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>登录GPAW的<a href="https://gitlab.com/gpaw/gpaw/tags" target="_blank" rel="noopener">GitLab-tags</a>，或者在<a href="https://wiki.fysik.dtu.dk/gpaw/install.html#getting-the-source-code" target="_blank" rel="noopener">这里</a>获取最新版本GPAW的tarball, 解压缩得到文件夹<code>gpaw-x.x.x</code>，其中<code>x.x.x</code>为版本号。该文件夹的结构如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── c/                 # C扩展源码</span><br><span class="line">├── CHANGELOG.rst</span><br><span class="line">├── config.py</span><br><span class="line">├── configuration.log</span><br><span class="line">├── CONTRIBUTING.rst</span><br><span class="line">├── COPYING</span><br><span class="line">├── customize.py       # 自定义文件</span><br><span class="line">├── gpaw/              # Python源码</span><br><span class="line">├── LICENSE</span><br><span class="line">├── MANIFEST.in</span><br><span class="line">├── PKG-INFO</span><br><span class="line">├── README.rst</span><br><span class="line">├── setup.py</span><br><span class="line">└── tools/             # 可执行程序，包括并行解释器gpaw-python</span><br></pre></td></tr></table></figure><p>我们暂时将其放在家目录下，即<code>~/gpaw-x.x.x</code>，之后我们将称其为GPAW家目录。</p><h3 id="修改customize-py"><a href="#修改customize-py" class="headerlink" title="修改customize.py"></a>修改<code>customize.py</code></h3><p>经过各种标准的和愚蠢的试错，一个可行的自定义文件写法为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">compiler = <span class="string">'mpiicc -fPIC'</span></span><br><span class="line">mpicompiler = <span class="string">'mpiicc -fPIC'</span>  <span class="comment"># use None if you don't want to build a gpaw-python</span></span><br><span class="line">mpilinker = mpicompiler</span><br><span class="line"></span><br><span class="line"><span class="comment"># the following variables should be defined according to your own environment </span></span><br><span class="line">FFTW3_HOME = <span class="string">'/path/to/FFTW3'</span></span><br><span class="line">MKLROOT    = <span class="string">'/path/to/mkl'</span></span><br><span class="line">LIBXC_HOME = <span class="string">'/path/to/libxc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the order is adapted from Intel MKL link advisor</span></span><br><span class="line">libraries = [ </span><br><span class="line">              <span class="string">'mkl_scalapack_lp64'</span>, </span><br><span class="line">              <span class="string">'mkl_intel_lp64'</span> ,<span class="string">'mkl_sequential'</span> ,<span class="string">'mkl_core'</span>,</span><br><span class="line">              <span class="string">'mkl_blacs_intelmpi_lp64'</span>,</span><br><span class="line">              <span class="string">'pthread'</span>,<span class="string">'m'</span>,<span class="string">'dl'</span>, </span><br><span class="line">            ]</span><br><span class="line">mpi_libraries = []</span><br><span class="line"></span><br><span class="line">library_dirs = [ MKLROOT+<span class="string">'/lib/intel64/'</span> , FFTW3_HOME+<span class="string">'/lib/'</span>]</span><br><span class="line"><span class="comment"># include numpy header to use array object</span></span><br><span class="line">include_dirs += [np.get_include(), MKLROOT+<span class="string">'/include/'</span>, FFTW3_HOME+<span class="string">'/include/'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch on ScaLAPACK</span></span><br><span class="line">scalapack = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">if</span> scalapack:</span><br><span class="line">    define_macros += [(<span class="string">'GPAW_NO_UNDERSCORE_CBLACS'</span>, <span class="string">'1'</span>)]</span><br><span class="line">    define_macros += [(<span class="string">'GPAW_NO_UNDERSCORE_CSCALAPACK'</span>, <span class="string">'1'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># - dynamic linking LIBXC (requires rpath or setting LD_LIBRARY_PATH at runtime):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">True</span>:</span><br><span class="line">    include_dirs += [LIBXC_HOME+<span class="string">'/include'</span>]</span><br><span class="line">    library_dirs += [LIBXC_HOME+<span class="string">'/lib'</span>]</span><br><span class="line">    <span class="comment"># You can use rpath to avoid changing LD_LIBRARY_PATH:</span></span><br><span class="line">    extra_link_args += [<span class="string">'-Wl,-rpath=%s/lib'</span> % LIBXC_HOME]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'xc'</span> <span class="keyword">not</span> <span class="keyword">in</span> libraries:</span><br><span class="line">        libraries.append(<span class="string">'xc'</span>)</span><br></pre></td></tr></table></figure><span class="label label-danger">问题</span> 之前在这里遇到过一个问题是，当设置<code>compiler=icc</code>时，尽管可以编译通过，但在运行测试时会报错<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libmkl_blacs_intelmpi_lp64.so: undefined symbol 'MPI_Finalize'</span><br></pre></td></tr></table></figure><span class="label label-success">解决</span>事实上<code>MPI_Finalize</code>本就不是在BLACS里定义的符号，而是MPI库中<code>libmpi.so.12</code>中定义的。这个错误的原因在于<code>libraries</code>是由<code>compiler</code>和<code>mpicompiler</code>公用的链接选项，尽管<code>mpiicc</code>会自动链接<code>libmpi.so</code>，但<code>icc</code>不会，所以会缺少MPI符号定义。将<code>compiler=icc</code>改成<code>compiler=mpiicc</code>即可解决问题。另一种办法是在<code>libraries</code>中增加成员<code>mpi</code>，同时在<code>library_dirs</code>和<code>library_include</code>中分别增加MPI库的lib和include，但这就比较繁琐了。<br><br><span class="label label-info">其他尝试</span> 在出现上面错误的时候，我也尝试了不链接ScaLAPACK和BLACS的办法(<code>scalapack=False</code>)，可以正常通过所有串行和并行测试，但在做Diamond (两原子) <em>GW</em>的全节点32核并行计算时报错<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: BLACS is unavailable. GPAW must be compiled with BLACS/ScaLAPACK, and must run in MPI-enabled interpreter (gpaw-python)</span><br></pre></td></tr></table></figure><p>所以看来在做大规模并行时，GPAW要求BLACS/ScaLAPACK是必须的，从计算的经济性角度上来看也是可以理解的，帮用户省些钱。我也尝试了用GCC(4.8.5)编译依赖和GPAW，但在链接ScaLAPACK时遇到了问题，要求我用<code>-fPIC</code>选项重新编译所有静态库，但其实我在编译时一直带着该选项。在此注明。</p><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>在GPAW根目录下，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python setup.py install --user</span></span><br></pre></td></tr></table></figure><p>开始编译。C扩展的编译过程会创建<code>build</code>文件夹，编译结束后会将<code>gpaw</code>文件夹和编译产生的C扩展库<code>_gpaw.so</code>复制到<code>~/.local/lib/python2.7/site-packages/</code>下，复制<code>gpaw</code>等可执行程序到<code>~/.local/bin</code>下。</p><h3 id="安装PAW集测试"><a href="#安装PAW集测试" class="headerlink" title="安装PAW集测试"></a>安装PAW集测试</h3><p>测试前需要将<code>~/.local/bin</code>添加到<code>PATH</code>下。此时还仍然无法进行计算，因为GPAW依赖于赝势和PAW数据集，而下载的源代码中并不包含这一部分。此时需要执行(例如在GPAW根目录下)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpaw install-data pawdir</span></span><br></pre></td></tr></table></figure><p>让GPAW下载PAW数据集(需要联网，PKUHPC上请使用<code>connect</code>命令，见<a href="https://its.pku.edu.cn/download_ipgwclient.jsp" target="_blank" rel="noopener">pku-its-download</a>)。下载完成后，GPAW会将<code>pawdir</code>绝对路径添加到<code>~/.gpaw/rc.py</code>中，以作为赝势PAW搜索路径。</p><p>结束以上步骤后即可进行测试，四核独立串行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpaw <span class="built_in">test</span> -j 4</span></span><br></pre></td></tr></table></figure><p>四核并行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpaw -P 4 <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mpiexec -np 4 gpaw-python -m gpaw <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>用上面的<code>customize.py</code>做并行测试时会在<code>parallel/augment_grid.py</code>报<code>MPI_Barrier</code>错误从而无法全部通过, 但可以使用32核跑官网Tutorial<a href="https://wiki.fysik.dtu.dk/gpaw/tutorials/gw_tutorial/gw_tutorial.html" target="_blank" rel="noopener">准粒子计算</a>的例子<a href="https://wiki.fysik.dtu.dk/gpaw/tutorials/gw_tutorial/gw_tutorial.html#convergence-with-respect-to-cutoff-energy-and-number-of-k-points" target="_blank" rel="noopener">C_ecut_k_conv_GW.py</a> </p></div><h3 id="实际计算"><a href="#实际计算" class="headerlink" title="实际计算"></a>实际计算</h3><p>测试通过(Hopefully)！可以做具体计算啦。如果写好了名为<code>runscript.py</code>的GPAW并行计算脚本，那么在添加可执行权限后，可以按照如下指令在本地或登录节点执行计算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mpiexec -np 4 gpaw-python runscript.py</span></span><br></pre></td></tr></table></figure><p>而<code>runscript.py</code>具体要怎么写，就是后面教程要做的事情了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过了一段比较挣扎和丢人的编译历程，总算将GPAW编译成功并能用PKUHPC上一整个节点的核心并行计算官方算例。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本系列将介绍如何使用第一性原理电子结构计算Python包&lt;a href=&quot;https://wiki.fysik.dtu.dk/gpaw/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GPAW&lt;/a&gt;，进行材料的电子结构模拟，包括最基本的DFT基态计算以及更高级的准粒子&lt;em&gt;GW&lt;/em&gt;和BSE的光谱性质计算。本文作为该系列的第一篇文章，对GPAW在本地和集群上的安装、样例测试进行介绍，总结了这一过程中遇到的问题和解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="http://minyez.github.io/categories/Tutorial/"/>
    
    
      <category term="Scientific Computation" scheme="http://minyez.github.io/tags/Scientific-Computation/"/>
    
      <category term="Compilation" scheme="http://minyez.github.io/tags/Compilation/"/>
    
      <category term="Intel" scheme="http://minyez.github.io/tags/Intel/"/>
    
      <category term="GPAW" scheme="http://minyez.github.io/tags/GPAW/"/>
    
  </entry>
  
  <entry>
    <title>F2PY——在Python中调用Fortran函数或子程序</title>
    <link href="http://minyez.github.io/2018/05/15/f2py-1/"/>
    <id>http://minyez.github.io/2018/05/15/f2py-1/</id>
    <published>2018-05-15T04:28:13.000Z</published>
    <updated>2018-07-20T14:41:22.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍了如何在Python脚本中，通过引入Fortran动态库调用Fortran子程序，加速Python中的数值计算。以矩阵乘法为例，比较了调用Python中NumPy和SciPy包的方法和使用Fortran子程序两种方式在计算效率上的差别。<br><a id="more"></a></p><p>Python作为一种动态的解释型编译器，尽管具有新手友好、直观易读、适用范围广的特点，但比起静态的编译型语言Fortran/C，在数值计算方面的表现要差许多，这是由于Python没有被预先编译到机器语言层面。目前流行的Python数值计算包<a href="http://www.numpy.org/" target="_blank" rel="noopener">NumPy</a>和<a href="https://www.scipy.org/scipylib/index.html" target="_blank" rel="noopener">SciPy</a>提供了大量数值计算相关的函数和方法，在很大程度上弥补了Python这一缺点，但仍然无法满足数值计算的全部需求，特别是难以链接一些尚未Python模块化的数学库和工具库。</p><p>作为老牌数值计算语言，Fortran拥有许多高效的数学库，我们很容易在Fortran程序中使用他们，但要把他们用到Python中则并不是那么容易。一种解决方案是使用<a href="https://docs.scipy.org/doc/numpy/f2py/" target="_blank" rel="noopener">F2PY</a>产生Python接口，它是NumPy项目的一部分。基于F2PY，在Python中调用Fortran函数的基本流程是</p><ol><li>编写使用了数学库的Fortran代码</li><li>在恰当的编译选项下使用<code>f2py</code>编译Fortran代码，产生可供引入的动态库</li><li>在Python中通过<code>import</code>引入动态库</li></ol><p>这样就能像调用Python包一样使用Fortran代码中定义的子程序和函数了。下面先简单介绍如何使用<code>f2py</code>，再以矩阵乘法作为例子做说明。</p><h2 id="使用F2PY产生供Python引入的动态库"><a href="#使用F2PY产生供Python引入的动态库" class="headerlink" title="使用F2PY产生供Python引入的动态库"></a>使用F2PY产生供Python引入的动态库</h2><h3 id="聪明的方法-创建署名文件"><a href="#聪明的方法-创建署名文件" class="headerlink" title="聪明的方法: 创建署名文件"></a>聪明的方法: 创建署名文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ f2py mysubr.F90 -m mysubr -h mysubr.pyf</span><br></pre></td></tr></table></figure><p>其中产生的<code>.pyf</code>就是所谓的署名文件(signature file)。其中定义了Python模块<code>mysubr</code>，它包含一个接口，<code>mysubr.F90</code>中所有函数和子程序都被声明在该接口中。每个声明中包含函数所需参量的类型和维度具体信息。具体可参照<a href="https://docs.scipy.org/doc/numpy/f2py/getting-started.html#the-smart-way" target="_blank" rel="noopener">官方文档</a>。产生<code>.pyf</code>文件后，可用下面的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ f2py -c mysub.pyf mysubr.F90</span><br></pre></td></tr></table></figure></p><p>产生动态库。 如果在编译动态库时需要链接外部函数库(MKL或者FFTW)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># link mysubr against libabc.a in /lib/dir/</span></span><br><span class="line">$ f2py -c -m mysubr mysubr.F90 -L/lib/dir/ -labc</span><br></pre></td></tr></table></figure></p><h2 id="举例-矩阵乘法"><a href="#举例-矩阵乘法" class="headerlink" title="举例: 矩阵乘法"></a>举例: 矩阵乘法</h2><h3 id="矩阵生成"><a href="#矩阵生成" class="headerlink" title="矩阵生成"></a>矩阵生成</h3><p>在进行矩阵乘法前，首先利用<code>random</code>模块产生<code>ndarray</code>类型的矩阵，这里取2000维的方阵进行测试。具体代码如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> seed, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the dimensions</span></span><br><span class="line">m = <span class="number">2000</span></span><br><span class="line">k = <span class="number">2000</span></span><br><span class="line">n = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create mat1(m,k) and mat2(k,n) matrices</span></span><br><span class="line">seed()</span><br><span class="line">mat1 = np.array([[ random() <span class="keyword">for</span> col <span class="keyword">in</span> range(k)] <span class="keyword">for</span> row <span class="keyword">in</span> range(m)], \</span><br><span class="line">                order=<span class="string">'Fortran'</span>, dtype=<span class="string">'float64'</span>)</span><br><span class="line">seed()</span><br><span class="line">mat2 = np.array([[ random() <span class="keyword">for</span> col <span class="keyword">in</span> range(n)] <span class="keyword">for</span> row <span class="keyword">in</span> range(k)], \</span><br><span class="line">                order=<span class="string">'Fortran'</span>, dtype=<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><p><code>order=&#39;Fortran&#39;</code>使用Fortran的数据存储方式。为保证计算效率，必须<strong>手动设置该值</strong>。</p><div class="alert alert-danger"><i class="fa fa-bug  float-left"></i>  <p>order默认为C。如果不覆盖默认值，Fortran代码的运算效率将下降很多。</p></div><h3 id="执行矩阵乘法"><a href="#执行矩阵乘法" class="headerlink" title="执行矩阵乘法"></a>执行矩阵乘法</h3><p>我们比较四种不同的矩阵乘法实现</p><h4 id="NumPy的matmul函数"><a href="#NumPy的matmul函数" class="headerlink" title="NumPy的matmul函数"></a>NumPy的<code>matmul</code>函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mat3 = np.matmul(mat1, mat2)</span><br></pre></td></tr></table></figure><p><del>可以说这是最Pythonic的矩阵乘法。</del></p><h4 id="SciPy的linalg-blas-dgemm函数"><a href="#SciPy的linalg-blas-dgemm函数" class="headerlink" title="SciPy的linalg.blas.dgemm函数"></a>SciPy的<code>linalg.blas.dgemm</code>函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> linalg</span><br><span class="line">mat3 = linalg.blas.dgemm(mat1, mat2)</span><br></pre></td></tr></table></figure><h4 id="Fortran的matmul函数"><a href="#Fortran的matmul函数" class="headerlink" title="Fortran的matmul函数"></a>Fortran的<code>matmul</code>函数</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">! file: f_matmul.F90</span></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> f_matmul(m, n, k, mat1, mat2, mat3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">intent</span>(<span class="keyword">in</span>)  :: m, n, k</span><br><span class="line">    <span class="keyword">real</span>(<span class="number">8</span>), <span class="keyword">intent</span>(<span class="keyword">in</span>)  :: mat1(m,k), mat2(k,n)</span><br><span class="line">    <span class="keyword">real</span>(<span class="number">8</span>), <span class="keyword">intent</span>(<span class="keyword">out</span>) :: mat3(m,n)</span><br><span class="line"></span><br><span class="line">    mat3 = <span class="built_in">matmul</span>(mat1, mat2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> f_matmul</span><br></pre></td></tr></table></figure><p><code>m,n,k</code>用于确定矩阵<code>mat1,mat2,mat3</code>的维度，这在纯Fortran中是必须声明的参数，但<code>f2py</code>会将其转化为可选参数，矩阵规模由从Python输入的<code>mat1,mat2</code>确定。在对应Python文件中加入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> f_matmul <span class="keyword">import</span> f_matmul</span><br></pre></td></tr></table></figure></p><p>即可调用.</p><h4 id="Intel-MKL的dgemm子程序"><a href="#Intel-MKL的dgemm子程序" class="headerlink" title="Intel MKL的dgemm子程序"></a>Intel MKL的<code>dgemm</code>子程序</h4><p>将上面Fortran代码中的<code>matmul</code>行替换为</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">! file: dgemm.F90</span></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> f_dgemm(m, n, k, mat1, mat2, mat3)</span><br><span class="line"><span class="comment">! ...</span></span><br><span class="line">    <span class="keyword">call</span> dgemm(<span class="string">'N'</span>, <span class="string">'N'</span>, m, n, k, <span class="number">1.0D0</span>, mat1, m, mat2, k, <span class="number">0.0D0</span>, mat3, m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> f_dgemm</span><br></pre></td></tr></table></figure><p>此时编译需要链接MKL库，编译命令为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ f2py -c -m dgemm --fcompiler=intelem --compiler=intelem -L<span class="variable">$MKLROOT</span>/lib/intel64/ -lmkl_rt dgemm.F90</span><br></pre></td></tr></table></figure></p><p>在对应Python文件中加入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dgemm <span class="keyword">import</span> f_dgemm</span><br></pre></td></tr></table></figure></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下</p><table><thead><tr><th>Dimension</th><th>3000 (o=C)</th><th>5000 (o=C)</th><th>3000</th><th>5000</th><th>10000</th></tr></thead><tbody><tr><td><code>np.matmul</code></td><td>1.1611</td><td>5.2340</td><td>1.1611</td><td>5.2404</td><td>41.8116</td></tr><tr><td>SciPy <code>dgemm</code></td><td>1.3578</td><td>5.8640</td><td>1.1568</td><td>5.2255</td><td>41.4386</td></tr><tr><td>Fortran <code>matmul</code></td><td>1.4907</td><td>6.5730</td><td>1.3204</td><td>5.9488</td><td>48.3035</td></tr><tr><td>Intel MKL <code>dgemm</code></td><td>1.2586</td><td>5.4831</td><td>1.0553</td><td>4.8380</td><td>38.9050</td></tr></tbody></table><p>其中<code>o=C</code>表示使用C存储方式, 不注明则是用Fortran。通过比较可以得到下面的一些结论</p><ul><li>在Fortran order下，计算效率顺序为Fortran <code>matmul</code>&lt;<code>np.matmul</code>&lt;<code>scipy.linalg.blas.dgemm</code>&lt; Intel MKL <code>dgemm</code>。</li><li><code>np.array</code>在内存中的存储方式(<code>order=&#39;C&#39;|&#39;Fortran&#39;</code>)显著影响Fortran <code>matmul</code>, <code>scipy.linalg.blas.dgemm</code>和Intel MKL <code>dgemm</code>的计算效率，<code>order=&#39;Fortran&#39;</code>要比<code>&#39;C&#39;</code>快约10%。</li><li>不合理的存储方式(<code>&#39;C&#39;</code>)导致MKL效率低于<code>np.matmul</code>。</li><li>存储方式对<code>np.matmul</code>没有显著影响。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了使用F2PY工具将Fortran代码编译为可供Python调用的动态库，并以矩阵乘法为例进行演示。同时，比较了流行的Python数值计算模块NumPy和SciPy中的实现与Fortran语言下<code>matmul</code>和MKL<code>dgemm</code>实现的计算效率。测试结果发现，在高维情况下，Intel MKL具有最高的效率。产生<code>ndarray</code>时的存储方式(<code>order=Fortran</code>)对Fortran库中函数计算效率有显著影响。</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>使用MKL的DGEMM时，用<code>f2py</code>链接MKL库编译后执行<code>test_dgemm.py</code>，报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so</span><br></pre></td></tr></table></figure><p>解决方法是在编译前preload几个核心的Intel库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_PRELOAD=<span class="string">"<span class="variable">$MKLROOT</span>/lib/intel64/libmkl_def.so:<span class="variable">$MKLROOT</span>/lib/intel64/libmkl_sequential.so:<span class="variable">$MKLROOT</span>/lib/intel64/libmkl_core.so"</span></span><br></pre></td></tr></table></figure></p><p>必须按顺序全部预载入，否则<code>ld</code>会报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文介绍了如何在Python脚本中，通过引入Fortran动态库调用Fortran子程序，加速Python中的数值计算。以矩阵乘法为例，比较了调用Python中NumPy和SciPy包的方法和使用Fortran子程序两种方式在计算效率上的差别。&lt;br&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://minyez.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="http://minyez.github.io/tags/Python/"/>
    
      <category term="Fortran" scheme="http://minyez.github.io/tags/Fortran/"/>
    
      <category term="F2PY" scheme="http://minyez.github.io/tags/F2PY/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置(一)——安装, Markdown写作及主题</title>
    <link href="http://minyez.github.io/2018/02/15/Hexo-1/"/>
    <id>http://minyez.github.io/2018/02/15/Hexo-1/</id>
    <published>2018-02-15T06:26:15.000Z</published>
    <updated>2018-07-21T01:58:07.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍了使用Hexo配置本博客和用Markdown进行博文写作的基本方法和技巧，为撰写排版更好更清晰的技术文本作准备。 <a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前代码从来都是习惯在组里LinuxPC或者学校HPC上写的，但时常会因为不在随手可及的地方觉得不安。年前从学长手中购入MBP作为自己今后的代码生产主力，同时跑一点简单的科学代码，也想着把Linux和原笔记本上的一些代码项目移植到Mac上。这自然就包括了这个Hexo博客。<br>尽管技术写作和笔记并没有停滞，但是一直处于比较粗浅的笔记状态，就没有敢上传到这里(还是希望比较成型后再传)。更主要的一个原因是觉得这个博客的界面配置还始终是未完成状态，自己不甚满意，平时也没有时间好好研究JavaScript和Nodejs代码，最后就没有上传笔记的动力了，导致这个个人域名完全处于浪费钱的状态。于是想趁着春节假期把博客框架好好整一整。【结果拖到了暑假<br>这篇文章内所有命令均在macOS High Sierra (10.13)下执行。默认Homebrew基本配置完成，包括本文所涉及的Git和Nodejs开发环境等，执行命令前需要拥有GitHub账户并完成Git全局配置。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>个人博客服务端使用<a href="https://pages.github.com" target="_blank" rel="noopener">Git Pages</a>，它是GitHub专为个人、组织用户和代码项目提供的页面服务，通过Git将本地HTML和CSS文件结构部署(deploy)到Page仓库master分支来实现。创建个人页面的方法是</p><ol><li>类似于一般代码仓库，在GitHub主页上创建名为<code>username@github.io</code>的仓库。以自己为例的话就是<code>minyez@github.io</code>的仓库。个人主页必须以此种方式命名。</li><li>进入新建的仓库，点击Setting标签，在<code>Options</code>下翻到<code>GitHub Pages</code>标签，可以看到这一部分处于激活模式。可与你的其他一般仓库(没有制作<code>doc</code>分支用于文档网站)进行对比。一般代码仓库也可以通过<code>Setting-&gt;Options-&gt;GitHub Pages</code>配置项目文档页面，需要选择<code>doc</code>分支承载HTML文件结构。</li><li>回到Code标签，新建<code>hexo</code>分支，并将其设为默认分支。之后<code>master</code>分支用来存储静态网页，<code>hexo</code>分支存储博文和主题的源文件。</li></ol><h3 id="安装Hexo和Git部署模块"><a href="#安装Hexo和Git部署模块" class="headerlink" title="安装Hexo和Git部署模块"></a>安装Hexo和Git部署模块</h3><p>Hexo本质上是一个模块集成的HTML和CSS文件结构生成程序，用户可以把精力集中在博文内容上，而让Hexo管理界面风格和样式。通过node包管理器<code>npm</code>安装<code>hexo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm hexo install</span><br></pre></td></tr></table></figure><p>安装完成后，在某路径下，创建本地Hexo文件夹并初始化。以<code>my-hexo-dir</code>为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir my-hexo-dir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> my-hexo-dir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure><p>初始化后，文件夹内结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><code>node_modules</code>内包含在搭建网站时可能需要的模块，比如数学渲染模块<code>hexo-renderer-mathjax</code>和Git部署模块<code>hexo-deployer-git</code>，后者是我们通过Git部署GitHub Pages所必须的。安装模块通过<code>npm</code>完成，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><span class="label label-info">注</span><code>save</code>选项会更新<code>package.json</code>内的包依赖。 <code>--save</code>和<code>--save-dev</code>选项的比较可见这篇<a href="http://pwcong.me/2017/01/05/npm引入模块时--save-与--save-dev-的区别/" target="_blank" rel="noopener">文章</a>。<br><br>修改<code>_config.yml</code>中网络链接和与部署方法相关的代码块<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://minyez.github.io</span></span><br><span class="line"><span class="comment"># deploy method. By Git</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="attr">https://github.com/minyez/minyez.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这样一来，通过Hexo发布自己个人GitHub Pages博客的必要准备已经完成了。在<code>my-hexo-dir</code>下键入以下命令生成静态博客<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g         <span class="comment"># 使用Hexo生成HTML</span></span><br><span class="line">$ hexo s -p 4000 <span class="comment"># 生成本地网址，端口为4000</span></span><br></pre></td></tr></table></figure></p><p>在浏览器访问<a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a> 即可看到生成的Hexo博客。</p><h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>本博客使用的是从<a href="https://github.com/PytLab/hexo-theme-freemind" target="_blank" rel="noopener">PytLab</a>处Fork来的<a href="https://github.com/minyez/hexo-theme-freemind" target="_blank" rel="noopener">Freemind</a>主题。首先将仓库下载到本地<code>themes</code>文件夹内<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/minyez/hexo-theme-freemind freemind</span><br></pre></td></tr></table></figure></p><p>下载完成后，修改根目录下<code>_config.yml</code>文件中的<code>theme</code>标签以启用Freemind<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">freemind</span></span><br></pre></td></tr></table></figure></p><p>若对其他主题感兴趣，可自行google并通过类似的方法架设。此时重新生成并访问，可以发现博客已经从Landscape变为Freemind主题。</p><h3 id="开始写作-从模板新建"><a href="#开始写作-从模板新建" class="headerlink" title="开始写作: 从模板新建"></a>开始写作: 从模板新建</h3><p>在基本设置完成以后，我们就可以开始写作博客了。通过Hexo内建指令<code>new</code>创建新的博文<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post pname</span><br></pre></td></tr></table></figure></p><p>这会在<code>source/_posts</code>下创建Markdown文件<code>pname.md</code>和文件夹<code>pname</code>，后者用于存放md内引用的图片或代码文件。新建文件名的默认格式可通过修改<code>_config.yml</code>中的<code>new_post_name</code>来调整，例如<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span> <span class="comment"># yyyy-mm-dd-pname</span></span><br></pre></td></tr></table></figure></p><p>此时按上面指令新建<code>pname</code>将得到<code>2018-02-21-pname.md</code>和文件夹<code>2018-02-21-pname</code>。如果文章本身未成型，想先写一个草稿，用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new draft dname</span></span><br></pre></td></tr></table></figure><p>会在<code>source/_draft</code>下创建<code>dname.md</code>文件和<code>dname</code>文件夹。草稿写作完成后可用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo publish dname</span></span><br></pre></td></tr></table></figure><p>发布，此时Hexo会将<code>dname.md</code>和<code>dname</code>按照<code>new_post_name</code>的格式重命名后，移动到<code>source/_post</code>文件夹下，不需要自己手动改名。</p><h2 id="Hexo写作"><a href="#Hexo写作" class="headerlink" title="Hexo写作"></a>Hexo写作</h2><p>Hexo博客正文写作基于Markdown语法，网络上已经有非常多的教程和帮助文档，例如我现在在<a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a>中使用的<a href="http://daringfireball.net/projects/markdown/syntax#" target="_blank" rel="noopener">cheat sheet</a>。对于Hexo比较特别的是，为了识别博文的基本信息，我们需要一个front matter。另外，除了基本Markdown语法以外，我们还可以使用开源作者编写的Hexo渲染器及主题允许的各种特性，来丰富我们的写作手段。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front matter"></a>Front matter</h3><p><del>对任一篇Hexo博文，文件夹非必须，但一定会有对应的<code>.md</code>文件。</del>Hexo要求博文的<code>.md</code>文件开头需要有一个YAML格式的front matter。根据该front matter，Hexo可识别博文的标题、创建日期、标签、分类等各种特征以及需要用到的渲染器。Front matter的基本格式为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">pname</span>              <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-02</span><span class="bullet">-21</span> <span class="number">16</span><span class="string">:58:25</span> <span class="comment"># 创建时间</span></span><br><span class="line"><span class="attr">tags:</span>                     <span class="comment"># 标签. 不止一个时写成[tag1, tag2]格式</span></span><br><span class="line"><span class="attr">categories:</span>               <span class="comment"># 分类</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>利用<code>hexo new post</code>产生的博文，front matter会套用<code>scaffold</code>中的<code>post.md</code>，相当于post的初始化模板<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>可根据自己需要修改模板，如增加目录<code>toc</code>、归类<code>categories</code>以及首页图片<code>feature</code>。当存在与md文件名一致的文件夹时，md中图片和代码引用会在该文件夹中搜索，只需要把欲引用的图片代码放入文件夹，将引用路径设为文件名即可。</p><h3 id="基于MathJax的数学公式插入"><a href="#基于MathJax的数学公式插入" class="headerlink" title="基于MathJax的数学公式插入"></a>基于MathJax的数学公式插入</h3><p>由于专业原因，可以预想到很多时候需要插入大量的公式，实现方法是使用浏览器公式引擎<a href="https://www.mathjax.org/" target="_blank" rel="noopener">MathJax</a>。推荐使用<a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="noopener">hexo-renderer-mathjax</a>，安装很方便，对<code>_config.yml</code>的改动量也很小。通过npm安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-mathjax --save</span></span><br></pre></td></tr></table></figure><p>安装完就可以正常使用。如果出现无法渲染的情况，在<code>_config.yml</code>中加入:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo-renderer-mathjax</span></span><br></pre></td></tr></table></figure><p>输入行内公式可使用<code>$math$</code>，例如</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="formula">$P=iGG, G=<span class="tag">\<span class="name">frac</span><span class="string">&#123;1&#125;</span><span class="string">&#123;\omega - \hat&#123;H&#125;</span></span>_&#123;<span class="tag">\<span class="name">text</span><span class="string">&#123;KS&#125;</span></span>&#125;&#125;$</span></span><br></pre></td></tr></table></figure><p>效果：$P=iGG, G=\frac{1}{\omega - \hat{H}_{\text{KS}}}$</p><p>输入公式块可使用<code>$$mathblock$$</code>，例如</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="formula">$$ <span class="tag">\<span class="name">nabla</span></span>^2 <span class="tag">\<span class="name">phi</span> = </span>-<span class="tag">\<span class="name">rho</span></span> $$</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>$$\nabla^2 \phi = -\rho$$</p><p>此外还可以使用<code>\begin{equation}\end{equation}</code>来产生带编号的公式，但需要对hexo-renderer-mathjax包的内容进行修改。将<code>node_modules/hexo-renderer-mathjax/mathjax.html</code>中间<code>MathJax.Hub.Config</code>函数改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MathJax.Hub.Config(&#123;</span><br><span class="line">    tex2jax: &#123;</span><br><span class="line">        inlineMath: [ [<span class="string">"$"</span>,<span class="string">"$"</span>], [<span class="string">"\\("</span>,<span class="string">"\\)"</span>] ],</span><br><span class="line">        skipTags: [<span class="string">'script'</span>, <span class="string">'noscript'</span>, <span class="string">'style'</span>, <span class="string">'textarea'</span>, <span class="string">'pre'</span>, <span class="string">'code'</span>],</span><br><span class="line">        processEscapes: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    TeX: &#123;<span class="attr">equationNumbers</span>: &#123; <span class="attr">autoNumber</span>: <span class="string">"AMS"</span> &#125;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>即增加<code>TeX</code>一行(不要忘了前面的逗号<code>,</code>)。<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;equation&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">begin</span><span class="string">&#123;aligned&#125;</span></span></span></span><br><span class="line"><span class="formula">a=b+&amp;c <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">&amp;+e+f</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;aligned&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;equation&#125;</span></span><span class="tag">\<span class="name">label</span><span class="string">&#123;eq1&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure></p><p>效果：<br>$$\begin{equation}<br>\begin{aligned}<br>a=b+&amp;c \\<br>&amp;+e+f<br>\end{aligned}<br>\end{equation}\label{eq1}$$</p><p>还可以用<code>$\eqref{eq1}$</code>来引用公式$\eqref{eq1}$。上面equation例子还需要注意的是，默认的Markdown渲染器会将两个斜线<code>\\</code>渲染为<code>\</code>，从而导致无法转行。这里根据网络上的办法，修改<code>node_modules/marked/lib/marked.js</code>，将</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>移除marked对花括号和反斜线的渲染。如果出现下划线渲染问题，再将<code>em:</code>一行改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>以移除对下划线<code>_</code>的转换。</p><h3 id="链接自己博客内的文章"><a href="#链接自己博客内的文章" class="headerlink" title="链接自己博客内的文章"></a>链接自己博客内的文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link md-filename-wo-extension %&#125;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link compile_VASP_on_macOS %&#125;</span><br></pre></td></tr></table></figure><a href="/2018/01/02/compile_VASP_on_macOS/" title="在macOS上编译VASP">在macOS上编译VASP</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link f2py-1 %&#125;</span><br></pre></td></tr></table></figure><a href="/2018/05/15/f2py-1/" title="F2PY——在Python中调用Fortran函数或子程序">F2PY——在Python中调用Fortran函数或子程序</a><h2 id="Freemind特性"><a href="#Freemind特性" class="headerlink" title="Freemind特性"></a>Freemind特性</h2><h3 id="首页摘要"><a href="#首页摘要" class="headerlink" title="首页摘要"></a>首页摘要</h3><p>在要作为摘要的文字后面加上<code>&lt;!--more--&gt;</code>，首页将只显示<code>&lt;!--more--&gt;</code>前面的内容，同时出现&quot;Read More&quot;的按钮。摘要内容仍然会在正文中显示。</p><h3 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h3><p>使用标签插件(Tag plugins)可以使得文章的可读性更好。在这里我参考了wxpan提供的<a href="https://github.com/PytLab/hexo-theme-freemind/blob/source/_posts/tag-plugins-cn.md" target="_blank" rel="noopener">样例</a>。<del>总结一些tag plugins用法，包括一般Hexo和Bootstrap的tag plugins。</del>在使用插件前，需要先安装<a href="https://github.com/wzpan/hexo-tag-bootstrap" target="_blank" rel="noopener">Bootstrap</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-tag-bootstrap --save</span><br></pre></td></tr></table></figure><h4 id="标签-label"><a href="#标签-label" class="headerlink" title="标签(label)"></a>标签(label)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default %&#125;</span><br><span class="line">&#123;% label warn warning %&#125;</span><br><span class="line">&#123;% label succ success %&#125;</span><br><span class="line">&#123;% label danger danger %&#125;</span><br><span class="line">&#123;% label prim primary %&#125;</span><br><span class="line">&#123;% label info info %&#125;</span><br></pre></td></tr></table></figure><p>效果是插入一个醒目的颜色小标签<br><span class="label label-default">default</span> <span class="label label-warning">warn</span> <span class="label label-success">succ</span> <span class="label label-danger">danger</span> <span class="label label-primary">prim</span> <span class="label label-info">info</span></p><h4 id="警报-alert"><a href="#警报-alert" class="headerlink" title="警报(alert)"></a>警报(alert)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert warning %&#125; 这是一个警告类型的警报 &#123;% endalert %&#125;</span><br><span class="line">&#123;% alert danger %&#125; 这是一个危险类型的警报 &#123;% endalert %&#125;</span><br><span class="line">&#123;% alert success %&#125; 这是一个成功类型的警报 &#123;% endalert %&#125;</span><br><span class="line">&#123;% alert info %&#125; 这是一个信息类型的警报 &#123;% endalert %&#125;</span><br></pre></td></tr></table></figure><p>效果是插入一个带特定背景色的文字块，左上方含有标识文本性质的符号。</p><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>这是一个警告类型的警报 </p></div><div class="alert alert-danger"><i class="fa fa-bug  float-left"></i>  <p>这是一个危险类型的警报 </p></div><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>这是一个成功类型的警报 </p></div><div class="alert alert-info"><i class="fa fa-info  float-left"></i>  <p>这是一个信息类型的警报 </p></div><h4 id="徽章-badge"><a href="#徽章-badge" class="headerlink" title="徽章(badge)"></a>徽章(badge)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% badge 徽章测试 %&#125;</span><br></pre></td></tr></table></figure><p>效果是<span class="badge badge-secondary">徽章测试</span></p><h2 id="Freemind调教"><a href="#Freemind调教" class="headerlink" title="Freemind调教"></a>Freemind调教</h2><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>若非特别指出，所有的关于Freemind的调教都是在<code>themes/freemind</code>文件夹内，不要与Hexo根目录混淆。 </p></div><h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><p><del>Hexo会在根目录下<code>source/assets/images/favicon/</code>内寻找图片作为网站图标。另一种方法是在<code>_config.yml</code>内通过编辑<code>favicon</code>标签显示指定</del></p><p>网站图标设定功能在<code>layout/_partial/head.ejs</code>中定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.favicon</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;assets/images/favicon/icon.png"</span> <span class="attr">rel</span>=<span class="string">"icon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>然后将命名为<code>icon.png</code>的网站图标图片放入Hexo根目录下的<code>source/assets/images/favicon</code>下即可。也可以修改<code>href</code>属性，换成自己想要的路径。</p><h3 id="边栏链接及链接图标"><a href="#边栏链接及链接图标" class="headerlink" title="边栏链接及链接图标"></a>边栏链接及链接图标</h3><p>在<code>_config.yml</code>内编辑<code>links</code>标签，每一条短线对应一个链接条目<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  - title:</span> <span class="string">"Github-minyez"</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://github.com/minyez</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">"fa fa-github"</span></span><br></pre></td></tr></table></figure></p><p>其中<code>icon</code>对应链接旁显示的图标。本示例使用了<a href="https://fontawesome.com" target="_blank" rel="noopener">Font Awesome</a>提供的图标，该项目提供的全部图标可以在<a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">这里</a>找到。</p><h3 id="谷歌统计GA"><a href="#谷歌统计GA" class="headerlink" title="谷歌统计GA"></a>谷歌统计GA</h3><p>使用谷歌账号登录<a href="https://analytics.google.com/analytics/web/#/" target="_blank" rel="noopener">谷歌统计</a>, 在管理标签中找到用户管理。在媒体资源设置中找到自己的跟踪ID，并设置默认跟踪网址, 然后在跟踪信息-跟踪代码中，将全局网站代码粘贴到<code>layout/_partial/after_foot.ejs</code>底部即可。</p><p><img src="follow-code-GA.png" alt="跟踪代码块截图"></p><h3 id="修改页尾标记"><a href="#修改页尾标记" class="headerlink" title="修改页尾标记"></a>修改页尾标记</h3><p>在<code>layout/_partial/footer.ejs</code>中修改.</p><h3 id="配色修改"><a href="#配色修改" class="headerlink" title="配色修改"></a>配色修改</h3><p>由于个人偏好蓝色和深绿色，需要简单修改一下博文大小标题和行间代码的配色。在<code>source/css/highlight.css</code>中修改行间代码的CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="comment">/*text-shadow: 0 1px #fff; */</span> <span class="comment">/*删去白色阴影*/</span></span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">    <span class="attribute">white-space</span>: normal;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#458B00</span>; <span class="comment">/* 翠绿 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>source/css/style.css</code>中修改文章中大小标题的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0.83em</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#104E8B</span>; <span class="comment">/* 二级标题藏青 */</span></span><br><span class="line">  <span class="comment">/*  color: green; */</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="comment">/*  color: #9C4C17; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1E90FF</span>; <span class="comment">/* 三级标题湖蓝 */</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">  <span class="comment">/*  color: #B94A48; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#CC0033</span>; <span class="comment">/* 四级标题红色以防标题层级过低看不到 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字两端对齐"><a href="#文字两端对齐" class="headerlink" title="文字两端对齐"></a>文字两端对齐</h3><p>在<code>source/css/style.css</code>中加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: justify</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DISQUS评论"><a href="#DISQUS评论" class="headerlink" title="DISQUS评论"></a>DISQUS评论</h3><p>注册<a href="https://disqus.com/" target="_blank" rel="noopener">DISQUS</a>账号，选择&quot;I want to install disqus on my site&quot;，使用universal code安装，将这部分代码拷贝到<code>layout/_partial/post/comment.ejs</code>中。接下来配置Disqus，主要是<code>Website Name</code>和<code>Website URL</code>，前者我设置为我的shigaro。然后在Hexo根目录<code>_config.yml</code>下加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comment</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">shigaro</span></span><br></pre></td></tr></table></figure><h3 id="增加代码块复制功能"><a href="#增加代码块复制功能" class="headerlink" title="增加代码块复制功能"></a>增加代码块复制功能</h3><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>笔者基于Hexo框架和Freemind主题搭建了个人博客，根据自己的需求进行了自定义，并利用MathJax渲染器和Bootstrap特性进行了Markdown写作。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://jdhao.github.io/2018/01/25/hexo-mathjax-equation-number/" target="_blank" rel="noopener">LaTeX Equation Numbering Done Right in Hexo</a><br>另一个渲染器hexo-math及一个讨论其用法的<a href="https://github.com/hexojs/hexo-math/issues/26" target="_blank" rel="noopener">Issue</a><br>如何在自己的主题下实现MathJax支持：<a href="https://www.cnblogs.com/wangxin37/p/8185688.html" target="_blank" rel="noopener">在Hexo中渲染MathJax数学公式</a><br>代码块复制：<a href="https://www.ofind.cn/blog/HEXO/HEXO%E4%BC%98%E5%8C%96%E4%B9%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E6%B7%BB%E5%8A%A0%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD.html" target="_blank" rel="noopener">HEXO优化之（二）----添加复制功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文介绍了使用Hexo配置本博客和用Markdown进行博文写作的基本方法和技巧，为撰写排版更好更清晰的技术文本作准备。
    
    </summary>
    
      <category term="Software" scheme="http://minyez.github.io/categories/Software/"/>
    
    
      <category term="Hexo" scheme="http://minyez.github.io/tags/Hexo/"/>
    
      <category term="Freemind" scheme="http://minyez.github.io/tags/Freemind/"/>
    
  </entry>
  
  <entry>
    <title>在macOS上编译VASP</title>
    <link href="http://minyez.github.io/2018/01/02/compile_VASP_on_macOS/"/>
    <id>http://minyez.github.io/2018/01/02/compile_VASP_on_macOS/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2018-07-20T14:41:37.836Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了笔者在macOS High Sierra上编译VASP.5.4.4时遇到的问题及解决问题的过程。 <a id="more"></a></p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>购买mac后，我希望能在macOS运行常用的科学计算程序，方便我做小规模测试，<a href="https://www.vasp.at/" target="_blank" rel="noopener">VASP</a>毋庸置疑是其中之一。系统环境为macOS High Sierra 10.13，编译VASP时编译环境为</p><ul><li>Intel Parallel Composer XE 2018.0.1</li><li>Intel ifort和icc编译的MPICH3</li><li>Intel ifort和icc编译的FFTW3 (MPICH3并行)</li><li>Intel ifort和icc编译的ScaLAPACK和BLACS (MPICH3并行)</li></ul><p>我的目标是编译<strong>VASP.5.4.1</strong>和<strong>VASP.5.4.4</strong>并成功用于Silicon的算例。VASP.5.4.1的编译很容易就通过了并能够正常地跑Silicon的例子。但VASP.5.4.4始终无法编译通过，主要问题在<strong>C++编译parser库时无法链接到一个symbol上</strong>。</p><h2 id="问题细节"><a href="#问题细节" class="headerlink" title="问题细节"></a>问题细节</h2><p>VASP编译过程用到的<code>makefile.include</code>文件如下所示。5.4.4版同5.4.1版include文件的主要区别，除了最后的GPU部分外，还有一个用C++编译<code>libparser.a</code>的选项，即<code>CXX_PARS</code>。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Precompiler options</span></span><br><span class="line">CPP_OPTIONS= -DHOST=\<span class="string">"LinuxIFC\"\</span></span><br><span class="line"><span class="string">             -DMPI -DMPI_BLOCK=8000 \</span></span><br><span class="line"><span class="string">             -Duse_collective \</span></span><br><span class="line"><span class="string">             -DscaLAPACK \</span></span><br><span class="line"><span class="string">             -DCACHE_SIZE=4000 \</span></span><br><span class="line"><span class="string">             -Davoidalloc \</span></span><br><span class="line"><span class="string">             -Duse_bse_te \</span></span><br><span class="line"><span class="string">             -Dtbdyn \</span></span><br><span class="line"><span class="string">             -Duse_shmem</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CPP        = fpp -f_com=no -free -w0  <span class="variable">$*</span><span class="variable">$(FUFFIX)</span> <span class="variable">$*</span><span class="variable">$(SUFFIX)</span> <span class="variable">$(CPP_OPTIONS)</span></span></span><br><span class="line"><span class="string">FC         = mpifort</span></span><br><span class="line"><span class="string">FCL        = mpifort #-mkl=sequential -lstdc++</span></span><br><span class="line"><span class="string">FREE       = -free -names lowercase</span></span><br><span class="line"><span class="string">FFLAGS     = -assume byterecl -w</span></span><br><span class="line"><span class="string">OFLAG      = -O2</span></span><br><span class="line"><span class="string">OFLAG_IN   = <span class="variable">$(OFLAG)</span></span></span><br><span class="line"><span class="string">DEBUG      = -O0</span></span><br><span class="line"><span class="string">MKL_PATH   = <span class="variable">$(MKLROOT)</span>/lib/</span></span><br><span class="line"><span class="string">BLAS       =</span></span><br><span class="line"><span class="string">LAPACK     = <span class="variable">$(MKLROOT)</span>/lib/libmkl_intel_lp64.a <span class="variable">$(MKLROOT)</span>/lib/libmkl_sequential.a <span class="variable">$(MKLROOT)</span>/lib/libmkl_core.a -lpthread -lm -ldl</span></span><br><span class="line"><span class="string">BLACS      = </span></span><br><span class="line"><span class="string">SCALAPACK  = /Users/stevezhang/software/mathlib/scalapack/2.0.2/intel/18.0.1/libscalapack.a </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OBJECTS    = fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d.o \</span></span><br><span class="line"><span class="string">     <span class="variable">$(HOME)</span>/lib/libfftw3xf_intel.a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INCS       = -m64 -I<span class="variable">$(MKLROOT)</span>/include/fftw -I<span class="variable">$(MKLROOT)</span>/include/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LLIBS      = <span class="variable">$(SCALAPACK)</span> <span class="variable">$(LAPACK)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OBJECTS_O1 += fftw3d.o fftmpi.o fftmpiw.o</span></span><br><span class="line"><span class="string">OBJECTS_O2 += fft3dlib.o</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># For what used to be vasp.5.lib</span></span><br><span class="line"><span class="string">CPP_LIB    = <span class="variable">$(CPP)</span></span></span><br><span class="line"><span class="string">FC_LIB     = <span class="variable">$(FC)</span></span></span><br><span class="line"><span class="string">CC_LIB     = icc</span></span><br><span class="line"><span class="string">CFLAGS_LIB = -O</span></span><br><span class="line"><span class="string">FFLAGS_LIB = -O1</span></span><br><span class="line"><span class="string">FREE_LIB   = <span class="variable">$(FREE)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OBJECTS_LIB= linpack_double.o getshmem.o</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># For the parser library</span></span><br><span class="line"><span class="string">CXX_PARS   = icpc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LIBS       += parser</span></span><br><span class="line"><span class="string">LLIBS      += -Lparser -lparser -lstdc++</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Normally no need to change this</span></span><br><span class="line"><span class="string">SRCDIR     = ../../src</span></span><br><span class="line"><span class="string">BINDIR     = ../../bin</span></span><br></pre></td></tr></table></figure><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make std</span><br></pre></td></tr></table></figure><p>在最后链接产生<code>vasp</code>前报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">"__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"</span>, referenced from:</span><br><span class="line">      __Z25interpret_function_stringPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEERKNS_12basic_stringIcNS_11char_traitsIcEENS2_IcEEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv"</span>, referenced from:</span><br><span class="line">      __ZNSt3__16vectorI9site_infoNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z8assemblePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEERK9site_infoRK9func_infoRK10t_modifier <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z12assemble_allPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPNS0_I9site_infoNS2_IS6_EEEEPNS0_I9func_infoNS2_ISA_EEEERK10t_modifier <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z16push_back_fromtoPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEEii <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z25interpret_function_stringPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEERKNS_12basic_stringIcNS_11char_traitsIcEENS2_IcEEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">      __ZNSt3__16vectorI9func_infoNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_ <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNKSt3__16locale9use_facetERNS0_2idE"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNKSt3__18ios_base6getlocEv"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt11logic_errorC2EPKc"</span>, referenced from:</span><br><span class="line">      __ZNSt3__16vectorI9site_infoNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z8assemblePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEERK9site_infoRK9func_infoRK10t_modifier <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z12assemble_allPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPNS0_I9site_infoNS2_IS6_EEEEPNS0_I9func_infoNS2_ISA_EEEERK10t_modifier <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z16push_back_fromtoPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEEii <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z25interpret_function_stringPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEERKNS_12basic_stringIcNS_11char_traitsIcEENS2_IcEEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">      __ZNSt3__16vectorI9func_infoNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_ <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"</span>, referenced from:</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z25interpret_function_stringPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEERKNS_12basic_stringIcNS_11char_traitsIcEENS2_IcEEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"</span>, referenced from:</span><br><span class="line">      __Z25interpret_function_stringPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEERKNS_12basic_stringIcNS_11char_traitsIcEENS2_IcEEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"</span>, referenced from:</span><br><span class="line">      __Z25interpret_function_stringPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEERKNS_12basic_stringIcNS_11char_traitsIcEENS2_IcEEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z15output_funclistPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z15output_funclistPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd"</span>, referenced from:</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf"</span>, referenced from:</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">  <span class="string">"__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi"</span>, referenced from:</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z15output_funclistPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNSt3__14coutE"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z15output_funclistPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">  <span class="string">"__ZNSt3__15ctypeIcE2idE"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__16localeD1Ev"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z15output_funclistPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">      ...</span><br><span class="line">  <span class="string">"__ZNSt3__18ios_base5clearEj"</span>, referenced from:</span><br><span class="line">      _parse_file_C <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyparsePNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z7yyerrorPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEEPKc <span class="keyword">in</span> libparser.a(locproj.tab.o)</span><br><span class="line">      __Z21output_basisfunctionsPNSt3__16vectorI7t_basisNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m <span class="keyword">in</span> libparser.a(basis.o)</span><br><span class="line">      __Z15output_sitelistPNSt3__16vectorI9site_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(sites.o)</span><br><span class="line">      __Z15output_funclistPNSt3__16vectorI9func_infoNS_9allocatorIS1_EEEE <span class="keyword">in</span> libparser.a(functions.o)</span><br><span class="line">      ...</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">make[2]: *** [vasp] Error 1</span><br><span class="line">cp: vasp: No such file or directory</span><br><span class="line">make[1]: *** [all] Error 1</span><br><span class="line">make: *** [std] Error 2</span><br></pre></td></tr></table></figure><p>整理一下，<code>Undefined symbols for architecture x86_64</code>表示在x86_64架构下符号未被定义，包括</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm</span><br><span class="line">__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv</span><br><span class="line">__ZNKSt3__16locale9use_facetERNS0_2idE</span><br><span class="line">__ZNKSt3__18ios_base6getlocEv</span><br><span class="line">__ZNSt11logic_errorC2EPKc</span><br><span class="line">__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm</span><br><span class="line">__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc</span><br><span class="line">__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm</span><br><span class="line">__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc</span><br><span class="line">__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf</span><br><span class="line">__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi</span><br><span class="line">__ZNSt3__14coutE</span><br><span class="line">__ZNSt3__15ctypeIcE2idE</span><br><span class="line">__ZNSt3__16localeD1Ev</span><br><span class="line">__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv</span><br><span class="line">__ZNSt3__18ios_base5clearEj</span><br></pre></td></tr></table></figure><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>首先在<code>makefile.include</code>里面的<code>CXX_PARS</code>后面加上Homebrew安装的gcc库和<code>-lstdc++</code>，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-L/usr/<span class="built_in">local</span>/Cellar/gcc/7.2.0/lib/gcc/7 -lstdc++</span><br></pre></td></tr></table></figure><p>这样子可以正常编译通过。但是跑VASP时会出现错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> running on    1 total cores</span><br><span class="line"> distrk:  each k-point on    1 cores,    1 groups</span><br><span class="line"> distr:  one band on    1 cores,    1 groups</span><br><span class="line"> using from now: INCAR</span><br><span class="line"> vasp.5.4.4.18Apr17-6-g9f103f2a35 (build Jan 09 2018 16:27:40) complex</span><br><span class="line"></span><br><span class="line"> POSCAR found <span class="built_in">type</span> information on POSCAR  Si</span><br><span class="line"> POSCAR found :  1 types and       2 ions</span><br><span class="line"> scaLAPACK will be used</span><br><span class="line">dyld: lazy symbol binding failed: Symbol not found: __ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev</span><br><span class="line">  Referenced from: /Users/stevezhang/software/sci/vasp/vasp.5.4.4-intel-2018.0.1/common/build/std/vasp</span><br><span class="line">  Expected <span class="keyword">in</span>: flat namespace</span><br><span class="line"></span><br><span class="line">dyld: Symbol not found: __ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev</span><br><span class="line">  Referenced from: /Users/stevezhang/software/sci/vasp/vasp.5.4.4-intel-2018.0.1/common/build/std/vasp</span><br><span class="line">  Expected <span class="keyword">in</span>: flat namespace</span><br><span class="line"></span><br><span class="line">forrtl: error (76): Abort <span class="built_in">trap</span> signal</span><br><span class="line">Image              PC                Routine            Line        Source</span><br><span class="line">vasp               0000000103C7ABFA  for__signal_handl     Unknown  Unknown</span><br><span class="line">libsystem_platfor  00007FFF6C6DEF5A  _sigtramp             Unknown  Unknown</span><br><span class="line">fish: <span class="string">'vasp'</span> terminated by signal SIGABRT (Abort)</span><br></pre></td></tr></table></figure><p>主要错误是<code>dyld</code>没有找到symbol。用<code>nm</code>命令检查<code>libstdc++.a</code>和<code>libstdc++.dylib</code>，可以看到<code>__ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev</code>都是有定义的，但始终链接不上去。考虑<code>dyld</code>的搜索路径<code>DYLD_LD_LIBRARY</code>。将<code>/usr/local/Cellar/gcc/7.2.0/lib/gcc/7</code>添加到环境变量<code>DYLD_LD_LIBRARY</code>中后重新编译<code>libparser.a</code>，再编译<code>vasp</code>就能成功运行。</p><p>最后<strong>VASP.5.4.4</strong>编译成功时的环境变量和include文件放在这里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$DYLD_LIBRARY_PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/gcc/7.2.0/lib/gcc/7:/usr/<span class="built_in">local</span>/Cellar/gcc/7.2.0/lib/gcc/7/gcc/x86_64-apple-darwin17.0.0/7.2.0/:/Users/stevezhang/software/compiler/mpich/3.2.1/intel/18.0.1/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/compiler/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/compiler/lib/intel64:/opt/intel/compilers_and_libraries_2018.1.126/mac/ipp/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/compiler/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/mkl/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/tbb/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/tbb/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/daal/lib:/opt/intel/compilers_and_libraries_2018.1.126/mac/daal/../tbb/lib:/usr/<span class="built_in">local</span>/opt/tcl-tk/lib:/usr/<span class="built_in">local</span>/lib:/usr/lib:</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LIBRARYR_PATH</span> </span><br><span class="line">... <span class="comment"># 和DYLD一样</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/gcc/7.2.0/lib/gcc/7:/usr/<span class="built_in">local</span>/Cellar/gcc/7.2.0/lib/gcc/7/gcc/x86_64-apple-darwin17.0.0/7.2.0/:/Users/stevezhang/software/mathlib/scalapack/2.0.2/intel/18.0.1/:/Users/stevezhang/software/mathlib/fftw/3.3.7/intel/18.0.1/lib:/Users/stevezhang/software/compiler/mpich/3.2.1/intel/18.0.1/lib:/usr/<span class="built_in">local</span>/opt/tcl-tk/lib:/usr/<span class="built_in">local</span>/lib:/usr/lib:</span><br></pre></td></tr></table></figure><p>其实可以注意一下<code>LD_LIBRARY_PATH</code>和<code>LIBRARY_PATH</code>之间的差别：因为MKLROOT之类的环境变量是通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> compilervars.sh intel64</span><br></pre></td></tr></table></figure><p>来添加的，可见<code>compilervars.sh</code>并没有编辑<code>LD_LIBRARY_PATH</code>这一变量。include文件如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Precompiler options</span></span><br><span class="line">CPP_OPTIONS= -DHOST=\<span class="string">"LinuxIFC\"\</span></span><br><span class="line"><span class="string">             -DMPI -DMPI_BLOCK=8000 \</span></span><br><span class="line"><span class="string">             -Duse_collective \</span></span><br><span class="line"><span class="string">             -DscaLAPACK \</span></span><br><span class="line"><span class="string">             -DCACHE_SIZE=4000 \</span></span><br><span class="line"><span class="string">             -Davoidalloc \</span></span><br><span class="line"><span class="string">             -Duse_bse_te \</span></span><br><span class="line"><span class="string">             -Dtbdyn \</span></span><br><span class="line"><span class="string">             -Duse_shmem</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CPP        = fpp -f_com=no -free -w0  <span class="variable">$*</span><span class="variable">$(FUFFIX)</span> <span class="variable">$*</span><span class="variable">$(SUFFIX)</span> <span class="variable">$(CPP_OPTIONS)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FC         = mpifort </span></span><br><span class="line"><span class="string">FCL        = mpifort -mkl=sequential -lstdc++</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FREE       = -free -names lowercase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FFLAGS     = -assume byterecl -w</span></span><br><span class="line"><span class="string">OFLAG      = -O2</span></span><br><span class="line"><span class="string">OFLAG_IN   = <span class="variable">$(OFLAG)</span></span></span><br><span class="line"><span class="string">DEBUG      = -O0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MKL_PATH   = <span class="variable">$(MKLROOT)</span>/lib/</span></span><br><span class="line"><span class="string">BLAS       =</span></span><br><span class="line"><span class="string">LAPACK     = <span class="variable">$(MKLROOT)</span>/lib/libmkl_intel_lp64.a <span class="variable">$(MKLROOT)</span>/lib/libmkl_sequential.a <span class="variable">$(MKLROOT)</span>/lib/libmkl_core.a -lpthread -lm -ldl</span></span><br><span class="line"><span class="string">BLACS      = </span></span><br><span class="line"><span class="string">SCALAPACK  = /Users/stevezhang/software/mathlib/scalapack/2.0.2/intel/18.0.1/libscalapack.a </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OBJECTS    = fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d.o \</span></span><br><span class="line"><span class="string">     <span class="variable">$(HOME)</span>/lib/libfftw3xf_intel.a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INCS       = -m64 -I<span class="variable">$(MKLROOT)</span>/include/fftw -I<span class="variable">$(MKLROOT)</span>/include/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LLIBS      = -L/usr/local/lib/gcc/7/ <span class="variable">$(SCALAPACK)</span> <span class="variable">$(LAPACK)</span>  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OBJECTS_O1 += fftw3d.o fftmpi.o fftmpiw.o</span></span><br><span class="line"><span class="string">OBJECTS_O2 += fft3dlib.o</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># For what used to be vasp.5.lib</span></span><br><span class="line"><span class="string">CPP_LIB    = <span class="variable">$(CPP)</span></span></span><br><span class="line"><span class="string">FC_LIB     = <span class="variable">$(FC)</span></span></span><br><span class="line"><span class="string">CC_LIB     = icc</span></span><br><span class="line"><span class="string">CFLAGS_LIB = -O</span></span><br><span class="line"><span class="string">FFLAGS_LIB = -O1</span></span><br><span class="line"><span class="string">FREE_LIB   = <span class="variable">$(FREE)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OBJECTS_LIB= linpack_double.o getshmem.o</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># For the parser library</span></span><br><span class="line"><span class="string">#CXX_PARS   = c++ #/usr/local/lib/gcc/7/libstdc++.a</span></span><br><span class="line"><span class="string">#CXX_PARS = clang++ -++ -std=gnu++11</span></span><br><span class="line"><span class="string">CXX_PARS = icpc -lstdc++</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LIBS       += parser</span></span><br><span class="line"><span class="string">LLIBS      += -Lparser  -lparser -L/usr/local/lib/gcc/7/ -lstdc++ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Normally no need to change this</span></span><br><span class="line"><span class="string">SRCDIR     = ../../src</span></span><br><span class="line"><span class="string">BINDIR     = ../../bin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#================================================</span></span><br><span class="line"><span class="string"># GPU Stuff</span></span><br><span class="line"><span class="string">... # skipped for clarity</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>macOS的操作系统是Darwin。</p><blockquote><p>Darwin是由苹果电脑于2000年所释出的一个开放原始码操作系统。Darwin 是MacOSX 操作环境的操作系统成份。苹果电脑于2000年把Darwin 释出给开放原始码社群。现在的Darwin皆可以在苹果电脑的PowerPC 架构和X86 架构下执行，而后者的架构只有有限的驱动程序支援。</p></blockquote><p>在Darwin内存储函数库搜索路径的不是像Fedora和Ubuntu的<code>LD_LIBRARY_PATH</code>，而是<code>LIBRARY_PATH</code>和<code>DYLD_LIBRARY_PATH</code>。前者是<code>ld</code>的搜索路径，后者是动态链接指令<code>dyld</code>的搜索路径。需要使用<code>.la</code>和<code>.dylib</code>动态库时，需要将库路径加入<code>DYLD_LIBRARY_PATH</code>内。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在编译成功5.4.4后，我在几乎所有的modulefile中增加了<code>prepend-path DYLD_LIBRARY_PATH</code>行，在module load时出现警告</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dyld: warning, unknown environment variable: DYLD_LIBRARY_PATH_modshare</span><br></pre></td></tr></table></figure><p>这个错误在跑vasp的时候也会产生。可能是<code>dyld</code>和Tcl版的<code>module</code>之前存在不兼容，但具体是什么导致的还不清楚。不过因为只是警告，并不影响<code>DYLD_LIBRARY_PATH</code>的定义。不过频繁出现实在太烦人了，因此我从modulefile中将<code>prepend-path DYLD_LIBRARY_PATH</code>删去，改在<code>.bashrc</code>内添加<code>DYLD_LIBRARY_PATH</code>。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://baike.baidu.com/item/Darwin/2537108?fr=aladdin" target="_blank" rel="noopener">Darwin 百度百科</a></p><p><a href="http://d.hatena.ne.jp/kimuraw/20150919/p1" target="_blank" rel="noopener">http://d.hatena.ne.jp/kimuraw/20150919/p1</a></p><p><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dyld.1.html" target="_blank" rel="noopener">man dyld</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了笔者在macOS High Sierra上编译VASP.5.4.4时遇到的问题及解决问题的过程。
    
    </summary>
    
      <category term="Software" scheme="http://minyez.github.io/categories/Software/"/>
    
    
      <category term="Scientific Computation" scheme="http://minyez.github.io/tags/Scientific-Computation/"/>
    
      <category term="VASP" scheme="http://minyez.github.io/tags/VASP/"/>
    
      <category term="Compilation" scheme="http://minyez.github.io/tags/Compilation/"/>
    
      <category term="macOS" scheme="http://minyez.github.io/tags/macOS/"/>
    
      <category term="Intel" scheme="http://minyez.github.io/tags/Intel/"/>
    
  </entry>
  
  <entry>
    <title>VPS与SSR配置科学上网</title>
    <link href="http://minyez.github.io/2017/12/22/VPS_and_SSR/"/>
    <id>http://minyez.github.io/2017/12/22/VPS_and_SSR/</id>
    <published>2017-12-22T08:46:46.000Z</published>
    <updated>2018-07-15T13:11:10.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文简单介绍了使用Shadowsocks翻越GFW实现对包括Google、Youtube、Twitter在内的国外网站的访问，叙述了基于Vultr公司服务器的SSR服务端部署和macOS/Windows客户端使用方法。 <a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>谷歌搜索对于学术研究的重要性无须赘述，Youtube上原创的优秀的讲座、课程录像和视频教程对于自学者来说也是非常好的资源。Facebook和Twitter也能帮助我们取得与外国同学的联系。但对于非IPv6用户而言，由于GFW的存在，直接连接这些网站的尝试最后都是徒劳。目前的解决方案包括hosts文件、VPN以及Shadowsocks。hosts文件指定域名解析IP，避免DNS污染，但通常隔一段时间需要更换，且周期不定。VPN通常价格较高，且同时使用的终端数量一般是受限的。Shadowsocks本身只是一个协议，它需要境外服务器支持，但使用VPS作为服务器，可以在较低价格情况下(￥15/月)同时保证10台左右终端的正常流量需求，且只要VPS的IP不被屏蔽，可以一直使用下去，不必更换。VPN越来越贵，hosts不灵的频率越来越高，于是以最近一次hosts失效为契机，我研究了一下SS的架设，自己配置了SS服务器和客户端。</p><div class="alert alert-info"><i class="fa fa-info  float-left"></i>  <p>最近在BBS上看到别人推荐<a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">V2Ray项目</a>，待以后补充。</p></div><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Virtual-Private-Server-VPS"><a href="#Virtual-Private-Server-VPS" class="headerlink" title="Virtual Private Server (VPS)"></a>Virtual Private Server (VPS)</h3><p>虚拟专有服务器, 是&quot;将一台服务器分区成多个虚拟专享服务器的服务&quot;(<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">中文维基</a>)，通常是由专门的VPS供应商提供。它的核心是基于虚拟机技术，将单个物理服务器的硬盘、网络、CPU计算、内存等资源进行隔离，模拟出多个独立服务器的使用体验。不同VPS在软件上相互独立，都可以独立地安装操作系统、启动与重启，用户在其上拥有超级用户权限，可进行自由配置和软件安装。缺点是，由于多个VPS用户在同一个物理服务器上，硬件资源会相互影响，特别是当供应商超卖导致超负荷时。专有服务器(Dedicated server)不存在这种情形，但也因为单个用户独占物理服务器，价格要比VPS高很多。</p><h3 id="Shadowsocks-SS"><a href="#Shadowsocks-SS" class="headerlink" title="Shadowsocks (SS)"></a>Shadowsocks (SS)</h3><p>由<a href="https://github.com/clowwindy" target="_blank" rel="noopener">clowwindy</a>首先开发的一个开源的加密代理项目，主要用于绕过GFW对国内网络请求的检测。其原理如图所示(<a href="https://ieeexplore.ieee.org/document/8048116/" target="_blank" rel="noopener">来源</a>)。在服务器端设置好密码、端口、协议、加密方式等等，客户端以相同的设置连接服务端。成功连接后，客户端与服务端之间建立sock5连接。在一次网络通信时，首先由本地客户端发送请求，与SS客户端通信。然后，SS客户端将请求加密，数据包以普通TCP包的外观发送到SS服务端。随后，SS服务端将数据包解密，将请求传递给墙外的网络服务器，最后再将网站响应数据返回给SS客户端。<br><img src="ss-comm-principle.gif" alt="Figure 1. Shadowsocks原理"><br>由于历史原因，我们还需要决定用什么版本的SS。笔者在这里使用的是<a href="https://github.com/shadowsocksrr/shadowsocksr.git" target="_blank" rel="noopener">ShadowsocksR</a>，它相比原版SS具有更多功能。尽管经历了<a href="https://t.du9l.com/2015/08/qi-wen-gong-shang/" target="_blank" rel="noopener">疑似违反GPL的事件</a>，但目前SSR源码已经公开且开发人员主要由新贡献者构成，它也是当前SS的主要项目分支(<a href="https://zh.wikipedia.org/wiki/Shadowsocks#ShadowsocksR" target="_blank" rel="noopener">中文维基20180702</a>)。</p><h3 id="Proxy-Auto-Config-PAC"><a href="#Proxy-Auto-Config-PAC" class="headerlink" title="Proxy Auto-Config (PAC)"></a>Proxy Auto-Config (PAC)</h3><p>代理自动配置。PAC定义了&quot;如何自动选择适当的代理服务器来访问一个网址(<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">中文维基</a>)&quot;。使用PAC需要一个PAC文件，其中必须包含名为<code>FindProxyForURL</code>的javascript函数。一个简单的例子是(来自中文维基)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindProxyForURL</span>(<span class="params">url, host</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"PROXY proxy.example.com:8080; DIRECT"</span></span><br><span class="line">    <span class="comment">//通过服务器proxy.example.com的8080端口来获取页面</span></span><br><span class="line">    <span class="comment">//如果服务器没有响应，则通过www直接访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Step-by-step-基于Vultr-VPS的SSR"><a href="#Step-by-step-基于Vultr-VPS的SSR" class="headerlink" title="Step by step: 基于Vultr VPS的SSR"></a>Step by step: 基于Vultr VPS的SSR</h2><p>基于SS原理我们可以知道，为了使用SSR，我们需要部署SSR客户端和服务端，而服务端需要部署在境外服务器上。那么需要做什么事情就很清楚了</p><ul><li><p>购买境外VPS</p></li><li><p>在VPS上部署SS服务端</p></li><li><p>在本地部署SS客户端</p></li></ul><p>接下来我们一条条看。</p><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>境外服务器选择<a href="www.vultr.com">Vultr</a>公司。访问主页(如下图)，注册账号后登录到个人页面管理。<br><img src="vultr-homepage.png" alt="Figure 2. Vultr首页"><br>个人页面如下所示，点击右上角加号部署新服务器<br><img src="vultr-mypage.png" alt="Figure 3. Vultr个人页面"><br>在新服务器的配置中，需要选择以下项目</p><h4 id="Server-Location"><a href="#Server-Location" class="headerlink" title="Server Location"></a>Server Location</h4><p>服务器位置。根据自己的网络情况选择最佳的服务器，一般判断标准是PING延迟，以及是否有较便宜的规模可供选择<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ping hnd-jp-ping.vultr.com    # Tokyo</span><br><span class="line"><span class="meta">$</span> ping sgp-ping.vult.com        # Singapore</span><br><span class="line"><span class="meta">$</span> ping sjo-ca-us-ping.vultr.com # Silicon Valley, CA</span><br><span class="line"><span class="meta">$</span> ping lax-ca-us-ping.vultr.com # Los Angeles, CA</span><br><span class="line"><span class="meta">$</span> ping fra-de-ping.vultr.com    # Frankfurt</span><br><span class="line"><span class="meta">$</span> ping nj-us-ping.vultr.com     # NY, New Jersey</span><br><span class="line"><span class="meta">$</span> ping il-us-ping.vultr.com     # Chicago, Illinois</span><br><span class="line"><span class="meta">$</span> ping fl-us-ping.vultr.com     # Miami, Florida</span><br><span class="line"><span class="meta">$</span> ping syd-au-ping.vultr.com    # Sydney, Australia</span><br><span class="line"><span class="meta">$</span> ping lon-gb-ping.vultr.com    # London, UK</span><br></pre></td></tr></table></figure></p><h4 id="Server-Type"><a href="#Server-Type" class="headerlink" title="Server Type"></a>Server Type</h4><p>操作系统。推荐选择比较稳定的Linux发行版，如CentOS, Ubuntu LTS等。推荐CentOS。</p><h4 id="Server-Size"><a href="#Server-Size" class="headerlink" title="Server Size"></a>Server Size</h4><p>服务器资费方案。一般来说，最低\$2.5的500G带宽足够个人或者三五同学公用的需求。但近日(20180714)发现这个方案已经不再分配公网IPv4，所以改用\$5的方案。这个价格比某些廉价VPN要贵不少，所以推荐多人分摊公用，这样既不浪费带宽，也能省些钱。</p><h4 id="Additional-Features"><a href="#Additional-Features" class="headerlink" title="Additional Features"></a>Additional Features</h4><p>额外特性。建议启用IPv6和DDoS保护(部分地区服务器支持)。</p><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>选择好后点击deploy完成部署，等待自动安装。完成后点击主页上刚刚部署的服务器右侧的三个小点，选择Server Details，记下IP Address和Password。Vultr网站上的准备到这里就完成了。 </p><h3 id="部署服务端"><a href="#部署服务端" class="headerlink" title="部署服务端"></a>部署服务端</h3><p>在终端上用<code>ssh</code>登录刚刚部署的服务器(CentOS)，用户为root(根用户)。首次登录最好先进行更新，同时改掉初始密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh root@vultrip  # with Password</span><br><span class="line"><span class="meta">$</span> yum update        # for first login</span><br><span class="line"><span class="meta">$</span> passwd            # change password</span><br></pre></td></tr></table></figure></p><p>登录后部署服务端。我们使用秋水逸冰的<a href="https://teddysun.com/486.html" target="_blank" rel="noopener">一键安装脚本</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br></pre></td></tr></table></figure></p><p>加上执行权限后运行之<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chmod +x shadowsocks-all.sh</span><br><span class="line"><span class="meta">$</span> ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></p><p>过程中需要依次对以下内容进行设置</p><ul><li>SS版本。选择SSR (2)。</li><li>密码。</li><li>端口(port)。初始端口随机生成。</li><li>加密方法(encryption)。</li><li>协议(protocol)。</li><li>混淆(obf)。</li></ul><p>记下以上设置，回车安装。上述设置也可以在<code>shadowsocks-all.log</code>中查询。接下来就可以退出服务器，回到本地设置客户端。</p><h3 id="部署客户端"><a href="#部署客户端" class="headerlink" title="部署客户端"></a>部署客户端</h3><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>推荐使用<a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">ShadowsocksX-NG</a>作为客户端。在GitHub上下载最新版本(Release标签内)，解压缩、安装。启用后单击右上角标记，按照上一步中的服务端部署方式，编辑服务器设置。<br><img src="ssr-client.png" alt="ShadowsocksX-NG服务器设置"><br>编辑完后点击&quot;打开Shadowsocks&quot;，即可使用。</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>推荐使用<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">Shadowsocks-windows</a>。下载解压后运行，双击任务栏中SS图标，弹出服务器配置窗口。具体配置方法与macOS类似。</p><h4 id="PAC分流"><a href="#PAC分流" class="headerlink" title="PAC分流"></a>PAC分流</h4><p>以上客户端均允许对访问请求进行分流，即仅对必须绕过GFW才能访问的地址使用sock5协议，这对应于PAC模式。一般通过<a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">GFW List</a>设置PAC地址列表。用户也可以进行自定义: 对于ShadowsocksX-NG，可以在&quot;代理设置-编辑PAC用户自定义规则&quot;中设置。对于Shadowsocks-windows，&quot;PAC-编辑本地PAC文件&quot;，手动编辑<code>pac.txt</code>中的<code>domains</code>变量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回顾从VPN、hosts到SS的过程，其实是自己能力和心态逐渐变化的过程。一开始什么也不懂，依靠别人的VPN过活; 后来看到了免费的hosts，自己也愿意稍微折腾一下，但渐渐也受不了每个hosts文件的短暂寿命和找hosts的痛苦，最后走上了折腾钱折腾时间但是一定程度上&quot;一劳永逸&quot;的SS(感谢开源项目开发者们和脚本作者)。也许之后还会继续折腾到V2Ray吧。谨把这Vultr VPS+SSR搭建过程献给与GFW战斗的勇者们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文简单介绍了使用Shadowsocks翻越GFW实现对包括Google、Youtube、Twitter在内的国外网站的访问，叙述了基于Vultr公司服务器的SSR服务端部署和macOS/Windows客户端使用方法。
    
    </summary>
    
      <category term="Life" scheme="http://minyez.github.io/categories/Life/"/>
    
    
      <category term="Shadowsocks" scheme="http://minyez.github.io/tags/Shadowsocks/"/>
    
      <category term="VPS" scheme="http://minyez.github.io/tags/VPS/"/>
    
      <category term="Network" scheme="http://minyez.github.io/tags/Network/"/>
    
  </entry>
  
</feed>
